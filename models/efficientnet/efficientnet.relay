#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 224, 224), float32], %efficientnet0_features_conv0_weight: Tensor[(32, 3, 3, 3), float32], %efficientnet0_features_batchnorm0_gamma: Tensor[(32), float32], %efficientnet0_features_batchnorm0_beta: Tensor[(32), float32], %efficientnet0_features_batchnorm0_running_mean: Tensor[(32), float32], %efficientnet0_features_batchnorm0_running_var: Tensor[(32), float32], %efficientnet0_features_mbconv0_conv0_weight: Tensor[(32, 32, 1, 1), float32], %efficientnet0_features_mbconv0_batchnorm0_gamma: Tensor[(32), float32], %efficientnet0_features_mbconv0_batchnorm0_beta: Tensor[(32), float32], %efficientnet0_features_mbconv0_batchnorm0_running_mean: Tensor[(32), float32], %efficientnet0_features_mbconv0_batchnorm0_running_var: Tensor[(32), float32], %efficientnet0_features_mbconv0_conv1_weight: Tensor[(32, 1, 3, 3), float32], %efficientnet0_features_mbconv0_batchnorm1_gamma: Tensor[(32), float32], %efficientnet0_features_mbconv0_batchnorm1_beta: Tensor[(32), float32], %efficientnet0_features_mbconv0_batchnorm1_running_mean: Tensor[(32), float32], %efficientnet0_features_mbconv0_batchnorm1_running_var: Tensor[(32), float32], %efficientnet0_features_mbconv0_conv2_weight: Tensor[(16, 32, 1, 1), float32], %efficientnet0_features_mbconv0_batchnorm2_gamma: Tensor[(16), float32], %efficientnet0_features_mbconv0_batchnorm2_beta: Tensor[(16), float32], %efficientnet0_features_mbconv0_batchnorm2_running_mean: Tensor[(16), float32], %efficientnet0_features_mbconv0_batchnorm2_running_var: Tensor[(16), float32], %efficientnet0_features_mbconv1_conv0_weight: Tensor[(96, 16, 1, 1), float32], %efficientnet0_features_mbconv1_batchnorm0_gamma: Tensor[(96), float32], %efficientnet0_features_mbconv1_batchnorm0_beta: Tensor[(96), float32], %efficientnet0_features_mbconv1_batchnorm0_running_mean: Tensor[(96), float32], %efficientnet0_features_mbconv1_batchnorm0_running_var: Tensor[(96), float32], %efficientnet0_features_mbconv1_conv1_weight: Tensor[(96, 1, 3, 3), float32], %efficientnet0_features_mbconv1_batchnorm1_gamma: Tensor[(96), float32], %efficientnet0_features_mbconv1_batchnorm1_beta: Tensor[(96), float32], %efficientnet0_features_mbconv1_batchnorm1_running_mean: Tensor[(96), float32], %efficientnet0_features_mbconv1_batchnorm1_running_var: Tensor[(96), float32], %efficientnet0_features_mbconv1_conv2_weight: Tensor[(24, 96, 1, 1), float32], %efficientnet0_features_mbconv1_batchnorm2_gamma: Tensor[(24), float32], %efficientnet0_features_mbconv1_batchnorm2_beta: Tensor[(24), float32], %efficientnet0_features_mbconv1_batchnorm2_running_mean: Tensor[(24), float32], %efficientnet0_features_mbconv1_batchnorm2_running_var: Tensor[(24), float32], %efficientnet0_features_mbconv2_conv0_weight: Tensor[(144, 24, 1, 1), float32], %efficientnet0_features_mbconv2_batchnorm0_gamma: Tensor[(144), float32], %efficientnet0_features_mbconv2_batchnorm0_beta: Tensor[(144), float32], %efficientnet0_features_mbconv2_batchnorm0_running_mean: Tensor[(144), float32], %efficientnet0_features_mbconv2_batchnorm0_running_var: Tensor[(144), float32], %efficientnet0_features_mbconv2_conv1_weight: Tensor[(144, 1, 3, 3), float32], %efficientnet0_features_mbconv2_batchnorm1_gamma: Tensor[(144), float32], %efficientnet0_features_mbconv2_batchnorm1_beta: Tensor[(144), float32], %efficientnet0_features_mbconv2_batchnorm1_running_mean: Tensor[(144), float32], %efficientnet0_features_mbconv2_batchnorm1_running_var: Tensor[(144), float32], %efficientnet0_features_mbconv2_conv2_weight: Tensor[(24, 144, 1, 1), float32], %efficientnet0_features_mbconv2_batchnorm2_gamma: Tensor[(24), float32], %efficientnet0_features_mbconv2_batchnorm2_beta: Tensor[(24), float32], %efficientnet0_features_mbconv2_batchnorm2_running_mean: Tensor[(24), float32], %efficientnet0_features_mbconv2_batchnorm2_running_var: Tensor[(24), float32], %efficientnet0_features_mbconv3_conv0_weight: Tensor[(144, 24, 1, 1), float32], %efficientnet0_features_mbconv3_batchnorm0_gamma: Tensor[(144), float32], %efficientnet0_features_mbconv3_batchnorm0_beta: Tensor[(144), float32], %efficientnet0_features_mbconv3_batchnorm0_running_mean: Tensor[(144), float32], %efficientnet0_features_mbconv3_batchnorm0_running_var: Tensor[(144), float32], %efficientnet0_features_mbconv3_conv1_weight: Tensor[(144, 1, 5, 5), float32], %efficientnet0_features_mbconv3_batchnorm1_gamma: Tensor[(144), float32], %efficientnet0_features_mbconv3_batchnorm1_beta: Tensor[(144), float32], %efficientnet0_features_mbconv3_batchnorm1_running_mean: Tensor[(144), float32], %efficientnet0_features_mbconv3_batchnorm1_running_var: Tensor[(144), float32], %efficientnet0_features_mbconv3_conv2_weight: Tensor[(40, 144, 1, 1), float32], %efficientnet0_features_mbconv3_batchnorm2_gamma: Tensor[(40), float32], %efficientnet0_features_mbconv3_batchnorm2_beta: Tensor[(40), float32], %efficientnet0_features_mbconv3_batchnorm2_running_mean: Tensor[(40), float32], %efficientnet0_features_mbconv3_batchnorm2_running_var: Tensor[(40), float32], %efficientnet0_features_mbconv4_conv0_weight: Tensor[(240, 40, 1, 1), float32], %efficientnet0_features_mbconv4_batchnorm0_gamma: Tensor[(240), float32], %efficientnet0_features_mbconv4_batchnorm0_beta: Tensor[(240), float32], %efficientnet0_features_mbconv4_batchnorm0_running_mean: Tensor[(240), float32], %efficientnet0_features_mbconv4_batchnorm0_running_var: Tensor[(240), float32], %efficientnet0_features_mbconv4_conv1_weight: Tensor[(240, 1, 5, 5), float32], %efficientnet0_features_mbconv4_batchnorm1_gamma: Tensor[(240), float32], %efficientnet0_features_mbconv4_batchnorm1_beta: Tensor[(240), float32], %efficientnet0_features_mbconv4_batchnorm1_running_mean: Tensor[(240), float32], %efficientnet0_features_mbconv4_batchnorm1_running_var: Tensor[(240), float32], %efficientnet0_features_mbconv4_conv2_weight: Tensor[(40, 240, 1, 1), float32], %efficientnet0_features_mbconv4_batchnorm2_gamma: Tensor[(40), float32], %efficientnet0_features_mbconv4_batchnorm2_beta: Tensor[(40), float32], %efficientnet0_features_mbconv4_batchnorm2_running_mean: Tensor[(40), float32], %efficientnet0_features_mbconv4_batchnorm2_running_var: Tensor[(40), float32], %efficientnet0_features_mbconv5_conv0_weight: Tensor[(240, 40, 1, 1), float32], %efficientnet0_features_mbconv5_batchnorm0_gamma: Tensor[(240), float32], %efficientnet0_features_mbconv5_batchnorm0_beta: Tensor[(240), float32], %efficientnet0_features_mbconv5_batchnorm0_running_mean: Tensor[(240), float32], %efficientnet0_features_mbconv5_batchnorm0_running_var: Tensor[(240), float32], %efficientnet0_features_mbconv5_conv1_weight: Tensor[(240, 1, 3, 3), float32], %efficientnet0_features_mbconv5_batchnorm1_gamma: Tensor[(240), float32], %efficientnet0_features_mbconv5_batchnorm1_beta: Tensor[(240), float32], %efficientnet0_features_mbconv5_batchnorm1_running_mean: Tensor[(240), float32], %efficientnet0_features_mbconv5_batchnorm1_running_var: Tensor[(240), float32], %efficientnet0_features_mbconv5_conv2_weight: Tensor[(80, 240, 1, 1), float32], %efficientnet0_features_mbconv5_batchnorm2_gamma: Tensor[(80), float32], %efficientnet0_features_mbconv5_batchnorm2_beta: Tensor[(80), float32], %efficientnet0_features_mbconv5_batchnorm2_running_mean: Tensor[(80), float32], %efficientnet0_features_mbconv5_batchnorm2_running_var: Tensor[(80), float32], %efficientnet0_features_mbconv6_conv0_weight: Tensor[(480, 80, 1, 1), float32], %efficientnet0_features_mbconv6_batchnorm0_gamma: Tensor[(480), float32], %efficientnet0_features_mbconv6_batchnorm0_beta: Tensor[(480), float32], %efficientnet0_features_mbconv6_batchnorm0_running_mean: Tensor[(480), float32], %efficientnet0_features_mbconv6_batchnorm0_running_var: Tensor[(480), float32], %efficientnet0_features_mbconv6_conv1_weight: Tensor[(480, 1, 3, 3), float32], %efficientnet0_features_mbconv6_batchnorm1_gamma: Tensor[(480), float32], %efficientnet0_features_mbconv6_batchnorm1_beta: Tensor[(480), float32], %efficientnet0_features_mbconv6_batchnorm1_running_mean: Tensor[(480), float32], %efficientnet0_features_mbconv6_batchnorm1_running_var: Tensor[(480), float32], %efficientnet0_features_mbconv6_conv2_weight: Tensor[(80, 480, 1, 1), float32], %efficientnet0_features_mbconv6_batchnorm2_gamma: Tensor[(80), float32], %efficientnet0_features_mbconv6_batchnorm2_beta: Tensor[(80), float32], %efficientnet0_features_mbconv6_batchnorm2_running_mean: Tensor[(80), float32], %efficientnet0_features_mbconv6_batchnorm2_running_var: Tensor[(80), float32], %efficientnet0_features_mbconv7_conv0_weight: Tensor[(480, 80, 1, 1), float32], %efficientnet0_features_mbconv7_batchnorm0_gamma: Tensor[(480), float32], %efficientnet0_features_mbconv7_batchnorm0_beta: Tensor[(480), float32], %efficientnet0_features_mbconv7_batchnorm0_running_mean: Tensor[(480), float32], %efficientnet0_features_mbconv7_batchnorm0_running_var: Tensor[(480), float32], %efficientnet0_features_mbconv7_conv1_weight: Tensor[(480, 1, 3, 3), float32], %efficientnet0_features_mbconv7_batchnorm1_gamma: Tensor[(480), float32], %efficientnet0_features_mbconv7_batchnorm1_beta: Tensor[(480), float32], %efficientnet0_features_mbconv7_batchnorm1_running_mean: Tensor[(480), float32], %efficientnet0_features_mbconv7_batchnorm1_running_var: Tensor[(480), float32], %efficientnet0_features_mbconv7_conv2_weight: Tensor[(80, 480, 1, 1), float32], %efficientnet0_features_mbconv7_batchnorm2_gamma: Tensor[(80), float32], %efficientnet0_features_mbconv7_batchnorm2_beta: Tensor[(80), float32], %efficientnet0_features_mbconv7_batchnorm2_running_mean: Tensor[(80), float32], %efficientnet0_features_mbconv7_batchnorm2_running_var: Tensor[(80), float32], %efficientnet0_features_mbconv8_conv0_weight: Tensor[(480, 80, 1, 1), float32], %efficientnet0_features_mbconv8_batchnorm0_gamma: Tensor[(480), float32], %efficientnet0_features_mbconv8_batchnorm0_beta: Tensor[(480), float32], %efficientnet0_features_mbconv8_batchnorm0_running_mean: Tensor[(480), float32], %efficientnet0_features_mbconv8_batchnorm0_running_var: Tensor[(480), float32], %efficientnet0_features_mbconv8_conv1_weight: Tensor[(480, 1, 5, 5), float32], %efficientnet0_features_mbconv8_batchnorm1_gamma: Tensor[(480), float32], %efficientnet0_features_mbconv8_batchnorm1_beta: Tensor[(480), float32], %efficientnet0_features_mbconv8_batchnorm1_running_mean: Tensor[(480), float32], %efficientnet0_features_mbconv8_batchnorm1_running_var: Tensor[(480), float32], %efficientnet0_features_mbconv8_conv2_weight: Tensor[(112, 480, 1, 1), float32], %efficientnet0_features_mbconv8_batchnorm2_gamma: Tensor[(112), float32], %efficientnet0_features_mbconv8_batchnorm2_beta: Tensor[(112), float32], %efficientnet0_features_mbconv8_batchnorm2_running_mean: Tensor[(112), float32], %efficientnet0_features_mbconv8_batchnorm2_running_var: Tensor[(112), float32], %efficientnet0_features_mbconv9_conv0_weight: Tensor[(672, 112, 1, 1), float32], %efficientnet0_features_mbconv9_batchnorm0_gamma: Tensor[(672), float32], %efficientnet0_features_mbconv9_batchnorm0_beta: Tensor[(672), float32], %efficientnet0_features_mbconv9_batchnorm0_running_mean: Tensor[(672), float32], %efficientnet0_features_mbconv9_batchnorm0_running_var: Tensor[(672), float32], %efficientnet0_features_mbconv9_conv1_weight: Tensor[(672, 1, 5, 5), float32], %efficientnet0_features_mbconv9_batchnorm1_gamma: Tensor[(672), float32], %efficientnet0_features_mbconv9_batchnorm1_beta: Tensor[(672), float32], %efficientnet0_features_mbconv9_batchnorm1_running_mean: Tensor[(672), float32], %efficientnet0_features_mbconv9_batchnorm1_running_var: Tensor[(672), float32], %efficientnet0_features_mbconv9_conv2_weight: Tensor[(112, 672, 1, 1), float32], %efficientnet0_features_mbconv9_batchnorm2_gamma: Tensor[(112), float32], %efficientnet0_features_mbconv9_batchnorm2_beta: Tensor[(112), float32], %efficientnet0_features_mbconv9_batchnorm2_running_mean: Tensor[(112), float32], %efficientnet0_features_mbconv9_batchnorm2_running_var: Tensor[(112), float32], %efficientnet0_features_mbconv10_conv0_weight: Tensor[(672, 112, 1, 1), float32], %efficientnet0_features_mbconv10_batchnorm0_gamma: Tensor[(672), float32], %efficientnet0_features_mbconv10_batchnorm0_beta: Tensor[(672), float32], %efficientnet0_features_mbconv10_batchnorm0_running_mean: Tensor[(672), float32], %efficientnet0_features_mbconv10_batchnorm0_running_var: Tensor[(672), float32], %efficientnet0_features_mbconv10_conv1_weight: Tensor[(672, 1, 5, 5), float32], %efficientnet0_features_mbconv10_batchnorm1_gamma: Tensor[(672), float32], %efficientnet0_features_mbconv10_batchnorm1_beta: Tensor[(672), float32], %efficientnet0_features_mbconv10_batchnorm1_running_mean: Tensor[(672), float32], %efficientnet0_features_mbconv10_batchnorm1_running_var: Tensor[(672), float32], %efficientnet0_features_mbconv10_conv2_weight: Tensor[(112, 672, 1, 1), float32], %efficientnet0_features_mbconv10_batchnorm2_gamma: Tensor[(112), float32], %efficientnet0_features_mbconv10_batchnorm2_beta: Tensor[(112), float32], %efficientnet0_features_mbconv10_batchnorm2_running_mean: Tensor[(112), float32], %efficientnet0_features_mbconv10_batchnorm2_running_var: Tensor[(112), float32], %efficientnet0_features_mbconv11_conv0_weight: Tensor[(672, 112, 1, 1), float32], %efficientnet0_features_mbconv11_batchnorm0_gamma: Tensor[(672), float32], %efficientnet0_features_mbconv11_batchnorm0_beta: Tensor[(672), float32], %efficientnet0_features_mbconv11_batchnorm0_running_mean: Tensor[(672), float32], %efficientnet0_features_mbconv11_batchnorm0_running_var: Tensor[(672), float32], %efficientnet0_features_mbconv11_conv1_weight: Tensor[(672, 1, 5, 5), float32], %efficientnet0_features_mbconv11_batchnorm1_gamma: Tensor[(672), float32], %efficientnet0_features_mbconv11_batchnorm1_beta: Tensor[(672), float32], %efficientnet0_features_mbconv11_batchnorm1_running_mean: Tensor[(672), float32], %efficientnet0_features_mbconv11_batchnorm1_running_var: Tensor[(672), float32], %efficientnet0_features_mbconv11_conv2_weight: Tensor[(192, 672, 1, 1), float32], %efficientnet0_features_mbconv11_batchnorm2_gamma: Tensor[(192), float32], %efficientnet0_features_mbconv11_batchnorm2_beta: Tensor[(192), float32], %efficientnet0_features_mbconv11_batchnorm2_running_mean: Tensor[(192), float32], %efficientnet0_features_mbconv11_batchnorm2_running_var: Tensor[(192), float32], %efficientnet0_features_mbconv12_conv0_weight: Tensor[(1152, 192, 1, 1), float32], %efficientnet0_features_mbconv12_batchnorm0_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv12_batchnorm0_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv12_batchnorm0_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv12_batchnorm0_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv12_conv1_weight: Tensor[(1152, 1, 5, 5), float32], %efficientnet0_features_mbconv12_batchnorm1_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv12_batchnorm1_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv12_batchnorm1_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv12_batchnorm1_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv12_conv2_weight: Tensor[(192, 1152, 1, 1), float32], %efficientnet0_features_mbconv12_batchnorm2_gamma: Tensor[(192), float32], %efficientnet0_features_mbconv12_batchnorm2_beta: Tensor[(192), float32], %efficientnet0_features_mbconv12_batchnorm2_running_mean: Tensor[(192), float32], %efficientnet0_features_mbconv12_batchnorm2_running_var: Tensor[(192), float32], %efficientnet0_features_mbconv13_conv0_weight: Tensor[(1152, 192, 1, 1), float32], %efficientnet0_features_mbconv13_batchnorm0_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv13_batchnorm0_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv13_batchnorm0_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv13_batchnorm0_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv13_conv1_weight: Tensor[(1152, 1, 5, 5), float32], %efficientnet0_features_mbconv13_batchnorm1_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv13_batchnorm1_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv13_batchnorm1_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv13_batchnorm1_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv13_conv2_weight: Tensor[(192, 1152, 1, 1), float32], %efficientnet0_features_mbconv13_batchnorm2_gamma: Tensor[(192), float32], %efficientnet0_features_mbconv13_batchnorm2_beta: Tensor[(192), float32], %efficientnet0_features_mbconv13_batchnorm2_running_mean: Tensor[(192), float32], %efficientnet0_features_mbconv13_batchnorm2_running_var: Tensor[(192), float32], %efficientnet0_features_mbconv14_conv0_weight: Tensor[(1152, 192, 1, 1), float32], %efficientnet0_features_mbconv14_batchnorm0_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv14_batchnorm0_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv14_batchnorm0_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv14_batchnorm0_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv14_conv1_weight: Tensor[(1152, 1, 5, 5), float32], %efficientnet0_features_mbconv14_batchnorm1_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv14_batchnorm1_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv14_batchnorm1_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv14_batchnorm1_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv14_conv2_weight: Tensor[(192, 1152, 1, 1), float32], %efficientnet0_features_mbconv14_batchnorm2_gamma: Tensor[(192), float32], %efficientnet0_features_mbconv14_batchnorm2_beta: Tensor[(192), float32], %efficientnet0_features_mbconv14_batchnorm2_running_mean: Tensor[(192), float32], %efficientnet0_features_mbconv14_batchnorm2_running_var: Tensor[(192), float32], %efficientnet0_features_mbconv15_conv0_weight: Tensor[(1152, 192, 1, 1), float32], %efficientnet0_features_mbconv15_batchnorm0_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv15_batchnorm0_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv15_batchnorm0_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv15_batchnorm0_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv15_conv1_weight: Tensor[(1152, 1, 3, 3), float32], %efficientnet0_features_mbconv15_batchnorm1_gamma: Tensor[(1152), float32], %efficientnet0_features_mbconv15_batchnorm1_beta: Tensor[(1152), float32], %efficientnet0_features_mbconv15_batchnorm1_running_mean: Tensor[(1152), float32], %efficientnet0_features_mbconv15_batchnorm1_running_var: Tensor[(1152), float32], %efficientnet0_features_mbconv15_conv2_weight: Tensor[(320, 1152, 1, 1), float32], %efficientnet0_features_mbconv15_batchnorm2_gamma: Tensor[(320), float32], %efficientnet0_features_mbconv15_batchnorm2_beta: Tensor[(320), float32], %efficientnet0_features_mbconv15_batchnorm2_running_mean: Tensor[(320), float32], %efficientnet0_features_mbconv15_batchnorm2_running_var: Tensor[(320), float32], %efficientnet0_features_conv1_weight: Tensor[(1280, 320, 1, 1), float32], %efficientnet0_features_batchnorm1_gamma: Tensor[(1280), float32], %efficientnet0_features_batchnorm1_beta: Tensor[(1280), float32], %efficientnet0_features_batchnorm1_running_mean: Tensor[(1280), float32], %efficientnet0_features_batchnorm1_running_var: Tensor[(1280), float32], %efficientnet0_output_pred_weight: Tensor[(1000, 1280, 1, 1), float32]) {
  %0 = nn.pad(%data, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %1 = nn.conv2d(%0, %efficientnet0_features_conv0_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3]);
  %2 = nn.batch_norm(%1, %efficientnet0_features_batchnorm0_gamma, %efficientnet0_features_batchnorm0_beta, %efficientnet0_features_batchnorm0_running_mean, %efficientnet0_features_batchnorm0_running_var, epsilon=0.001f);
  %3 = %2.0;
  %4 = multiply(%3, 1f);
  %5 = %2.0;
  %6 = sigmoid(%4);
  %7 = multiply(%5, %6);
  %8 = nn.conv2d(%7, %efficientnet0_features_mbconv0_conv0_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]);
  %9 = nn.batch_norm(%8, %efficientnet0_features_mbconv0_batchnorm0_gamma, %efficientnet0_features_mbconv0_batchnorm0_beta, %efficientnet0_features_mbconv0_batchnorm0_running_mean, %efficientnet0_features_mbconv0_batchnorm0_running_var, epsilon=0.001f);
  %10 = %9.0;
  %11 = multiply(%10, 1f);
  %12 = %9.0;
  %13 = sigmoid(%11);
  %14 = multiply(%12, %13);
  %15 = nn.pad(%14, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %16 = nn.conv2d(%15, %efficientnet0_features_mbconv0_conv1_weight, padding=[0, 0, 0, 0], groups=32, channels=32, kernel_size=[3, 3]);
  %17 = nn.batch_norm(%16, %efficientnet0_features_mbconv0_batchnorm1_gamma, %efficientnet0_features_mbconv0_batchnorm1_beta, %efficientnet0_features_mbconv0_batchnorm1_running_mean, %efficientnet0_features_mbconv0_batchnorm1_running_var, epsilon=0.001f);
  %18 = %17.0;
  %19 = multiply(%18, 1f);
  %20 = %17.0;
  %21 = sigmoid(%19);
  %22 = multiply(%20, %21);
  %23 = nn.conv2d(%22, %efficientnet0_features_mbconv0_conv2_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]);
  %24 = nn.batch_norm(%23, %efficientnet0_features_mbconv0_batchnorm2_gamma, %efficientnet0_features_mbconv0_batchnorm2_beta, %efficientnet0_features_mbconv0_batchnorm2_running_mean, %efficientnet0_features_mbconv0_batchnorm2_running_var, epsilon=0.001f);
  %25 = %24.0;
  %26 = nn.conv2d(%25, %efficientnet0_features_mbconv1_conv0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %27 = nn.batch_norm(%26, %efficientnet0_features_mbconv1_batchnorm0_gamma, %efficientnet0_features_mbconv1_batchnorm0_beta, %efficientnet0_features_mbconv1_batchnorm0_running_mean, %efficientnet0_features_mbconv1_batchnorm0_running_var, epsilon=0.001f);
  %28 = %27.0;
  %29 = multiply(%28, 1f);
  %30 = %27.0;
  %31 = sigmoid(%29);
  %32 = multiply(%30, %31);
  %33 = nn.pad(%32, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %34 = nn.conv2d(%33, %efficientnet0_features_mbconv1_conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], groups=96, channels=96, kernel_size=[3, 3]);
  %35 = nn.batch_norm(%34, %efficientnet0_features_mbconv1_batchnorm1_gamma, %efficientnet0_features_mbconv1_batchnorm1_beta, %efficientnet0_features_mbconv1_batchnorm1_running_mean, %efficientnet0_features_mbconv1_batchnorm1_running_var, epsilon=0.001f);
  %36 = %35.0;
  %37 = multiply(%36, 1f);
  %38 = %35.0;
  %39 = sigmoid(%37);
  %40 = multiply(%38, %39);
  %41 = nn.conv2d(%40, %efficientnet0_features_mbconv1_conv2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]);
  %42 = nn.batch_norm(%41, %efficientnet0_features_mbconv1_batchnorm2_gamma, %efficientnet0_features_mbconv1_batchnorm2_beta, %efficientnet0_features_mbconv1_batchnorm2_running_mean, %efficientnet0_features_mbconv1_batchnorm2_running_var, epsilon=0.001f);
  %43 = %42.0;
  %44 = nn.conv2d(%43, %efficientnet0_features_mbconv2_conv0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]);
  %45 = nn.batch_norm(%44, %efficientnet0_features_mbconv2_batchnorm0_gamma, %efficientnet0_features_mbconv2_batchnorm0_beta, %efficientnet0_features_mbconv2_batchnorm0_running_mean, %efficientnet0_features_mbconv2_batchnorm0_running_var, epsilon=0.001f);
  %46 = %45.0;
  %47 = multiply(%46, 1f);
  %48 = %45.0;
  %49 = sigmoid(%47);
  %50 = multiply(%48, %49);
  %51 = nn.pad(%50, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %52 = nn.conv2d(%51, %efficientnet0_features_mbconv2_conv1_weight, padding=[0, 0, 0, 0], groups=144, channels=144, kernel_size=[3, 3]);
  %53 = nn.batch_norm(%52, %efficientnet0_features_mbconv2_batchnorm1_gamma, %efficientnet0_features_mbconv2_batchnorm1_beta, %efficientnet0_features_mbconv2_batchnorm1_running_mean, %efficientnet0_features_mbconv2_batchnorm1_running_var, epsilon=0.001f);
  %54 = %53.0;
  %55 = multiply(%54, 1f);
  %56 = %53.0;
  %57 = sigmoid(%55);
  %58 = multiply(%56, %57);
  %59 = nn.conv2d(%58, %efficientnet0_features_mbconv2_conv2_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]);
  %60 = nn.batch_norm(%59, %efficientnet0_features_mbconv2_batchnorm2_gamma, %efficientnet0_features_mbconv2_batchnorm2_beta, %efficientnet0_features_mbconv2_batchnorm2_running_mean, %efficientnet0_features_mbconv2_batchnorm2_running_var, epsilon=0.001f);
  %61 = %60.0;
  %62 = %42.0;
  %63 = add(%61, %62);
  %64 = nn.conv2d(%63, %efficientnet0_features_mbconv3_conv0_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]);
  %65 = nn.batch_norm(%64, %efficientnet0_features_mbconv3_batchnorm0_gamma, %efficientnet0_features_mbconv3_batchnorm0_beta, %efficientnet0_features_mbconv3_batchnorm0_running_mean, %efficientnet0_features_mbconv3_batchnorm0_running_var, epsilon=0.001f);
  %66 = %65.0;
  %67 = multiply(%66, 1f);
  %68 = %65.0;
  %69 = sigmoid(%67);
  %70 = multiply(%68, %69);
  %71 = nn.pad(%70, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %72 = nn.conv2d(%71, %efficientnet0_features_mbconv3_conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], groups=144, channels=144, kernel_size=[5, 5]);
  %73 = nn.batch_norm(%72, %efficientnet0_features_mbconv3_batchnorm1_gamma, %efficientnet0_features_mbconv3_batchnorm1_beta, %efficientnet0_features_mbconv3_batchnorm1_running_mean, %efficientnet0_features_mbconv3_batchnorm1_running_var, epsilon=0.001f);
  %74 = %73.0;
  %75 = multiply(%74, 1f);
  %76 = %73.0;
  %77 = sigmoid(%75);
  %78 = multiply(%76, %77);
  %79 = nn.conv2d(%78, %efficientnet0_features_mbconv3_conv2_weight, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1]);
  %80 = nn.batch_norm(%79, %efficientnet0_features_mbconv3_batchnorm2_gamma, %efficientnet0_features_mbconv3_batchnorm2_beta, %efficientnet0_features_mbconv3_batchnorm2_running_mean, %efficientnet0_features_mbconv3_batchnorm2_running_var, epsilon=0.001f);
  %81 = %80.0;
  %82 = nn.conv2d(%81, %efficientnet0_features_mbconv4_conv0_weight, padding=[0, 0, 0, 0], channels=240, kernel_size=[1, 1]);
  %83 = nn.batch_norm(%82, %efficientnet0_features_mbconv4_batchnorm0_gamma, %efficientnet0_features_mbconv4_batchnorm0_beta, %efficientnet0_features_mbconv4_batchnorm0_running_mean, %efficientnet0_features_mbconv4_batchnorm0_running_var, epsilon=0.001f);
  %84 = %83.0;
  %85 = multiply(%84, 1f);
  %86 = %83.0;
  %87 = sigmoid(%85);
  %88 = multiply(%86, %87);
  %89 = nn.pad(%88, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %90 = nn.conv2d(%89, %efficientnet0_features_mbconv4_conv1_weight, padding=[0, 0, 0, 0], groups=240, channels=240, kernel_size=[5, 5]);
  %91 = nn.batch_norm(%90, %efficientnet0_features_mbconv4_batchnorm1_gamma, %efficientnet0_features_mbconv4_batchnorm1_beta, %efficientnet0_features_mbconv4_batchnorm1_running_mean, %efficientnet0_features_mbconv4_batchnorm1_running_var, epsilon=0.001f);
  %92 = %91.0;
  %93 = multiply(%92, 1f);
  %94 = %91.0;
  %95 = sigmoid(%93);
  %96 = multiply(%94, %95);
  %97 = nn.conv2d(%96, %efficientnet0_features_mbconv4_conv2_weight, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1]);
  %98 = nn.batch_norm(%97, %efficientnet0_features_mbconv4_batchnorm2_gamma, %efficientnet0_features_mbconv4_batchnorm2_beta, %efficientnet0_features_mbconv4_batchnorm2_running_mean, %efficientnet0_features_mbconv4_batchnorm2_running_var, epsilon=0.001f);
  %99 = %98.0;
  %100 = %80.0;
  %101 = add(%99, %100);
  %102 = nn.conv2d(%101, %efficientnet0_features_mbconv5_conv0_weight, padding=[0, 0, 0, 0], channels=240, kernel_size=[1, 1]);
  %103 = nn.batch_norm(%102, %efficientnet0_features_mbconv5_batchnorm0_gamma, %efficientnet0_features_mbconv5_batchnorm0_beta, %efficientnet0_features_mbconv5_batchnorm0_running_mean, %efficientnet0_features_mbconv5_batchnorm0_running_var, epsilon=0.001f);
  %104 = %103.0;
  %105 = multiply(%104, 1f);
  %106 = %103.0;
  %107 = sigmoid(%105);
  %108 = multiply(%106, %107);
  %109 = nn.pad(%108, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %110 = nn.conv2d(%109, %efficientnet0_features_mbconv5_conv1_weight, padding=[0, 0, 0, 0], groups=240, channels=240, kernel_size=[3, 3]);
  %111 = nn.batch_norm(%110, %efficientnet0_features_mbconv5_batchnorm1_gamma, %efficientnet0_features_mbconv5_batchnorm1_beta, %efficientnet0_features_mbconv5_batchnorm1_running_mean, %efficientnet0_features_mbconv5_batchnorm1_running_var, epsilon=0.001f);
  %112 = %111.0;
  %113 = multiply(%112, 1f);
  %114 = %111.0;
  %115 = sigmoid(%113);
  %116 = multiply(%114, %115);
  %117 = nn.conv2d(%116, %efficientnet0_features_mbconv5_conv2_weight, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]);
  %118 = nn.batch_norm(%117, %efficientnet0_features_mbconv5_batchnorm2_gamma, %efficientnet0_features_mbconv5_batchnorm2_beta, %efficientnet0_features_mbconv5_batchnorm2_running_mean, %efficientnet0_features_mbconv5_batchnorm2_running_var, epsilon=0.001f);
  %119 = %118.0;
  %120 = nn.conv2d(%119, %efficientnet0_features_mbconv6_conv0_weight, padding=[0, 0, 0, 0], channels=480, kernel_size=[1, 1]);
  %121 = nn.batch_norm(%120, %efficientnet0_features_mbconv6_batchnorm0_gamma, %efficientnet0_features_mbconv6_batchnorm0_beta, %efficientnet0_features_mbconv6_batchnorm0_running_mean, %efficientnet0_features_mbconv6_batchnorm0_running_var, epsilon=0.001f);
  %122 = %121.0;
  %123 = multiply(%122, 1f);
  %124 = %121.0;
  %125 = sigmoid(%123);
  %126 = multiply(%124, %125);
  %127 = nn.pad(%126, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %128 = nn.conv2d(%127, %efficientnet0_features_mbconv6_conv1_weight, padding=[0, 0, 0, 0], groups=480, channels=480, kernel_size=[3, 3]);
  %129 = nn.batch_norm(%128, %efficientnet0_features_mbconv6_batchnorm1_gamma, %efficientnet0_features_mbconv6_batchnorm1_beta, %efficientnet0_features_mbconv6_batchnorm1_running_mean, %efficientnet0_features_mbconv6_batchnorm1_running_var, epsilon=0.001f);
  %130 = %129.0;
  %131 = multiply(%130, 1f);
  %132 = %129.0;
  %133 = sigmoid(%131);
  %134 = multiply(%132, %133);
  %135 = nn.conv2d(%134, %efficientnet0_features_mbconv6_conv2_weight, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]);
  %136 = nn.batch_norm(%135, %efficientnet0_features_mbconv6_batchnorm2_gamma, %efficientnet0_features_mbconv6_batchnorm2_beta, %efficientnet0_features_mbconv6_batchnorm2_running_mean, %efficientnet0_features_mbconv6_batchnorm2_running_var, epsilon=0.001f);
  %137 = %136.0;
  %138 = %118.0;
  %139 = add(%137, %138);
  %140 = nn.conv2d(%139, %efficientnet0_features_mbconv7_conv0_weight, padding=[0, 0, 0, 0], channels=480, kernel_size=[1, 1]);
  %141 = nn.batch_norm(%140, %efficientnet0_features_mbconv7_batchnorm0_gamma, %efficientnet0_features_mbconv7_batchnorm0_beta, %efficientnet0_features_mbconv7_batchnorm0_running_mean, %efficientnet0_features_mbconv7_batchnorm0_running_var, epsilon=0.001f);
  %142 = %141.0;
  %143 = multiply(%142, 1f);
  %144 = %141.0;
  %145 = sigmoid(%143);
  %146 = multiply(%144, %145);
  %147 = nn.pad(%146, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %148 = nn.conv2d(%147, %efficientnet0_features_mbconv7_conv1_weight, padding=[0, 0, 0, 0], groups=480, channels=480, kernel_size=[3, 3]);
  %149 = nn.batch_norm(%148, %efficientnet0_features_mbconv7_batchnorm1_gamma, %efficientnet0_features_mbconv7_batchnorm1_beta, %efficientnet0_features_mbconv7_batchnorm1_running_mean, %efficientnet0_features_mbconv7_batchnorm1_running_var, epsilon=0.001f);
  %150 = %149.0;
  %151 = multiply(%150, 1f);
  %152 = %149.0;
  %153 = sigmoid(%151);
  %154 = multiply(%152, %153);
  %155 = nn.conv2d(%154, %efficientnet0_features_mbconv7_conv2_weight, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]);
  %156 = nn.batch_norm(%155, %efficientnet0_features_mbconv7_batchnorm2_gamma, %efficientnet0_features_mbconv7_batchnorm2_beta, %efficientnet0_features_mbconv7_batchnorm2_running_mean, %efficientnet0_features_mbconv7_batchnorm2_running_var, epsilon=0.001f);
  %157 = %156.0;
  %158 = add(%157, %139);
  %159 = nn.conv2d(%158, %efficientnet0_features_mbconv8_conv0_weight, padding=[0, 0, 0, 0], channels=480, kernel_size=[1, 1]);
  %160 = nn.batch_norm(%159, %efficientnet0_features_mbconv8_batchnorm0_gamma, %efficientnet0_features_mbconv8_batchnorm0_beta, %efficientnet0_features_mbconv8_batchnorm0_running_mean, %efficientnet0_features_mbconv8_batchnorm0_running_var, epsilon=0.001f);
  %161 = %160.0;
  %162 = multiply(%161, 1f);
  %163 = %160.0;
  %164 = sigmoid(%162);
  %165 = multiply(%163, %164);
  %166 = nn.pad(%165, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %167 = nn.conv2d(%166, %efficientnet0_features_mbconv8_conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], groups=480, channels=480, kernel_size=[5, 5]);
  %168 = nn.batch_norm(%167, %efficientnet0_features_mbconv8_batchnorm1_gamma, %efficientnet0_features_mbconv8_batchnorm1_beta, %efficientnet0_features_mbconv8_batchnorm1_running_mean, %efficientnet0_features_mbconv8_batchnorm1_running_var, epsilon=0.001f);
  %169 = %168.0;
  %170 = multiply(%169, 1f);
  %171 = %168.0;
  %172 = sigmoid(%170);
  %173 = multiply(%171, %172);
  %174 = nn.conv2d(%173, %efficientnet0_features_mbconv8_conv2_weight, padding=[0, 0, 0, 0], channels=112, kernel_size=[1, 1]);
  %175 = nn.batch_norm(%174, %efficientnet0_features_mbconv8_batchnorm2_gamma, %efficientnet0_features_mbconv8_batchnorm2_beta, %efficientnet0_features_mbconv8_batchnorm2_running_mean, %efficientnet0_features_mbconv8_batchnorm2_running_var, epsilon=0.001f);
  %176 = %175.0;
  %177 = nn.conv2d(%176, %efficientnet0_features_mbconv9_conv0_weight, padding=[0, 0, 0, 0], channels=672, kernel_size=[1, 1]);
  %178 = nn.batch_norm(%177, %efficientnet0_features_mbconv9_batchnorm0_gamma, %efficientnet0_features_mbconv9_batchnorm0_beta, %efficientnet0_features_mbconv9_batchnorm0_running_mean, %efficientnet0_features_mbconv9_batchnorm0_running_var, epsilon=0.001f);
  %179 = %178.0;
  %180 = multiply(%179, 1f);
  %181 = %178.0;
  %182 = sigmoid(%180);
  %183 = multiply(%181, %182);
  %184 = nn.pad(%183, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %185 = nn.conv2d(%184, %efficientnet0_features_mbconv9_conv1_weight, padding=[0, 0, 0, 0], groups=672, channels=672, kernel_size=[5, 5]);
  %186 = nn.batch_norm(%185, %efficientnet0_features_mbconv9_batchnorm1_gamma, %efficientnet0_features_mbconv9_batchnorm1_beta, %efficientnet0_features_mbconv9_batchnorm1_running_mean, %efficientnet0_features_mbconv9_batchnorm1_running_var, epsilon=0.001f);
  %187 = %186.0;
  %188 = multiply(%187, 1f);
  %189 = %186.0;
  %190 = sigmoid(%188);
  %191 = multiply(%189, %190);
  %192 = nn.conv2d(%191, %efficientnet0_features_mbconv9_conv2_weight, padding=[0, 0, 0, 0], channels=112, kernel_size=[1, 1]);
  %193 = nn.batch_norm(%192, %efficientnet0_features_mbconv9_batchnorm2_gamma, %efficientnet0_features_mbconv9_batchnorm2_beta, %efficientnet0_features_mbconv9_batchnorm2_running_mean, %efficientnet0_features_mbconv9_batchnorm2_running_var, epsilon=0.001f);
  %194 = %193.0;
  %195 = %175.0;
  %196 = add(%194, %195);
  %197 = nn.conv2d(%196, %efficientnet0_features_mbconv10_conv0_weight, padding=[0, 0, 0, 0], channels=672, kernel_size=[1, 1]);
  %198 = nn.batch_norm(%197, %efficientnet0_features_mbconv10_batchnorm0_gamma, %efficientnet0_features_mbconv10_batchnorm0_beta, %efficientnet0_features_mbconv10_batchnorm0_running_mean, %efficientnet0_features_mbconv10_batchnorm0_running_var, epsilon=0.001f);
  %199 = %198.0;
  %200 = multiply(%199, 1f);
  %201 = %198.0;
  %202 = sigmoid(%200);
  %203 = multiply(%201, %202);
  %204 = nn.pad(%203, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %205 = nn.conv2d(%204, %efficientnet0_features_mbconv10_conv1_weight, padding=[0, 0, 0, 0], groups=672, channels=672, kernel_size=[5, 5]);
  %206 = nn.batch_norm(%205, %efficientnet0_features_mbconv10_batchnorm1_gamma, %efficientnet0_features_mbconv10_batchnorm1_beta, %efficientnet0_features_mbconv10_batchnorm1_running_mean, %efficientnet0_features_mbconv10_batchnorm1_running_var, epsilon=0.001f);
  %207 = %206.0;
  %208 = multiply(%207, 1f);
  %209 = %206.0;
  %210 = sigmoid(%208);
  %211 = multiply(%209, %210);
  %212 = nn.conv2d(%211, %efficientnet0_features_mbconv10_conv2_weight, padding=[0, 0, 0, 0], channels=112, kernel_size=[1, 1]);
  %213 = nn.batch_norm(%212, %efficientnet0_features_mbconv10_batchnorm2_gamma, %efficientnet0_features_mbconv10_batchnorm2_beta, %efficientnet0_features_mbconv10_batchnorm2_running_mean, %efficientnet0_features_mbconv10_batchnorm2_running_var, epsilon=0.001f);
  %214 = %213.0;
  %215 = add(%214, %196);
  %216 = nn.conv2d(%215, %efficientnet0_features_mbconv11_conv0_weight, padding=[0, 0, 0, 0], channels=672, kernel_size=[1, 1]);
  %217 = nn.batch_norm(%216, %efficientnet0_features_mbconv11_batchnorm0_gamma, %efficientnet0_features_mbconv11_batchnorm0_beta, %efficientnet0_features_mbconv11_batchnorm0_running_mean, %efficientnet0_features_mbconv11_batchnorm0_running_var, epsilon=0.001f);
  %218 = %217.0;
  %219 = multiply(%218, 1f);
  %220 = %217.0;
  %221 = sigmoid(%219);
  %222 = multiply(%220, %221);
  %223 = nn.pad(%222, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %224 = nn.conv2d(%223, %efficientnet0_features_mbconv11_conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], groups=672, channels=672, kernel_size=[5, 5]);
  %225 = nn.batch_norm(%224, %efficientnet0_features_mbconv11_batchnorm1_gamma, %efficientnet0_features_mbconv11_batchnorm1_beta, %efficientnet0_features_mbconv11_batchnorm1_running_mean, %efficientnet0_features_mbconv11_batchnorm1_running_var, epsilon=0.001f);
  %226 = %225.0;
  %227 = multiply(%226, 1f);
  %228 = %225.0;
  %229 = sigmoid(%227);
  %230 = multiply(%228, %229);
  %231 = nn.conv2d(%230, %efficientnet0_features_mbconv11_conv2_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %232 = nn.batch_norm(%231, %efficientnet0_features_mbconv11_batchnorm2_gamma, %efficientnet0_features_mbconv11_batchnorm2_beta, %efficientnet0_features_mbconv11_batchnorm2_running_mean, %efficientnet0_features_mbconv11_batchnorm2_running_var, epsilon=0.001f);
  %233 = %232.0;
  %234 = nn.conv2d(%233, %efficientnet0_features_mbconv12_conv0_weight, padding=[0, 0, 0, 0], channels=1152, kernel_size=[1, 1]);
  %235 = nn.batch_norm(%234, %efficientnet0_features_mbconv12_batchnorm0_gamma, %efficientnet0_features_mbconv12_batchnorm0_beta, %efficientnet0_features_mbconv12_batchnorm0_running_mean, %efficientnet0_features_mbconv12_batchnorm0_running_var, epsilon=0.001f);
  %236 = %235.0;
  %237 = multiply(%236, 1f);
  %238 = %235.0;
  %239 = sigmoid(%237);
  %240 = multiply(%238, %239);
  %241 = nn.pad(%240, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %242 = nn.conv2d(%241, %efficientnet0_features_mbconv12_conv1_weight, padding=[0, 0, 0, 0], groups=1152, channels=1152, kernel_size=[5, 5]);
  %243 = nn.batch_norm(%242, %efficientnet0_features_mbconv12_batchnorm1_gamma, %efficientnet0_features_mbconv12_batchnorm1_beta, %efficientnet0_features_mbconv12_batchnorm1_running_mean, %efficientnet0_features_mbconv12_batchnorm1_running_var, epsilon=0.001f);
  %244 = %243.0;
  %245 = multiply(%244, 1f);
  %246 = %243.0;
  %247 = sigmoid(%245);
  %248 = multiply(%246, %247);
  %249 = nn.conv2d(%248, %efficientnet0_features_mbconv12_conv2_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %250 = nn.batch_norm(%249, %efficientnet0_features_mbconv12_batchnorm2_gamma, %efficientnet0_features_mbconv12_batchnorm2_beta, %efficientnet0_features_mbconv12_batchnorm2_running_mean, %efficientnet0_features_mbconv12_batchnorm2_running_var, epsilon=0.001f);
  %251 = %250.0;
  %252 = %232.0;
  %253 = add(%251, %252);
  %254 = nn.conv2d(%253, %efficientnet0_features_mbconv13_conv0_weight, padding=[0, 0, 0, 0], channels=1152, kernel_size=[1, 1]);
  %255 = nn.batch_norm(%254, %efficientnet0_features_mbconv13_batchnorm0_gamma, %efficientnet0_features_mbconv13_batchnorm0_beta, %efficientnet0_features_mbconv13_batchnorm0_running_mean, %efficientnet0_features_mbconv13_batchnorm0_running_var, epsilon=0.001f);
  %256 = %255.0;
  %257 = multiply(%256, 1f);
  %258 = %255.0;
  %259 = sigmoid(%257);
  %260 = multiply(%258, %259);
  %261 = nn.pad(%260, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %262 = nn.conv2d(%261, %efficientnet0_features_mbconv13_conv1_weight, padding=[0, 0, 0, 0], groups=1152, channels=1152, kernel_size=[5, 5]);
  %263 = nn.batch_norm(%262, %efficientnet0_features_mbconv13_batchnorm1_gamma, %efficientnet0_features_mbconv13_batchnorm1_beta, %efficientnet0_features_mbconv13_batchnorm1_running_mean, %efficientnet0_features_mbconv13_batchnorm1_running_var, epsilon=0.001f);
  %264 = %263.0;
  %265 = multiply(%264, 1f);
  %266 = %263.0;
  %267 = sigmoid(%265);
  %268 = multiply(%266, %267);
  %269 = nn.conv2d(%268, %efficientnet0_features_mbconv13_conv2_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %270 = nn.batch_norm(%269, %efficientnet0_features_mbconv13_batchnorm2_gamma, %efficientnet0_features_mbconv13_batchnorm2_beta, %efficientnet0_features_mbconv13_batchnorm2_running_mean, %efficientnet0_features_mbconv13_batchnorm2_running_var, epsilon=0.001f);
  %271 = %270.0;
  %272 = add(%271, %253);
  %273 = nn.conv2d(%272, %efficientnet0_features_mbconv14_conv0_weight, padding=[0, 0, 0, 0], channels=1152, kernel_size=[1, 1]);
  %274 = nn.batch_norm(%273, %efficientnet0_features_mbconv14_batchnorm0_gamma, %efficientnet0_features_mbconv14_batchnorm0_beta, %efficientnet0_features_mbconv14_batchnorm0_running_mean, %efficientnet0_features_mbconv14_batchnorm0_running_var, epsilon=0.001f);
  %275 = %274.0;
  %276 = multiply(%275, 1f);
  %277 = %274.0;
  %278 = sigmoid(%276);
  %279 = multiply(%277, %278);
  %280 = nn.pad(%279, 0, pad_width=[[0, 0], [0, 0], [2, 2], [2, 2]]);
  %281 = nn.conv2d(%280, %efficientnet0_features_mbconv14_conv1_weight, padding=[0, 0, 0, 0], groups=1152, channels=1152, kernel_size=[5, 5]);
  %282 = nn.batch_norm(%281, %efficientnet0_features_mbconv14_batchnorm1_gamma, %efficientnet0_features_mbconv14_batchnorm1_beta, %efficientnet0_features_mbconv14_batchnorm1_running_mean, %efficientnet0_features_mbconv14_batchnorm1_running_var, epsilon=0.001f);
  %283 = %282.0;
  %284 = multiply(%283, 1f);
  %285 = %282.0;
  %286 = sigmoid(%284);
  %287 = multiply(%285, %286);
  %288 = nn.conv2d(%287, %efficientnet0_features_mbconv14_conv2_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %289 = nn.batch_norm(%288, %efficientnet0_features_mbconv14_batchnorm2_gamma, %efficientnet0_features_mbconv14_batchnorm2_beta, %efficientnet0_features_mbconv14_batchnorm2_running_mean, %efficientnet0_features_mbconv14_batchnorm2_running_var, epsilon=0.001f);
  %290 = %289.0;
  %291 = add(%290, %272);
  %292 = nn.conv2d(%291, %efficientnet0_features_mbconv15_conv0_weight, padding=[0, 0, 0, 0], channels=1152, kernel_size=[1, 1]);
  %293 = nn.batch_norm(%292, %efficientnet0_features_mbconv15_batchnorm0_gamma, %efficientnet0_features_mbconv15_batchnorm0_beta, %efficientnet0_features_mbconv15_batchnorm0_running_mean, %efficientnet0_features_mbconv15_batchnorm0_running_var, epsilon=0.001f);
  %294 = %293.0;
  %295 = multiply(%294, 1f);
  %296 = %293.0;
  %297 = sigmoid(%295);
  %298 = multiply(%296, %297);
  %299 = nn.pad(%298, 0, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %300 = nn.conv2d(%299, %efficientnet0_features_mbconv15_conv1_weight, padding=[0, 0, 0, 0], groups=1152, channels=1152, kernel_size=[3, 3]);
  %301 = nn.batch_norm(%300, %efficientnet0_features_mbconv15_batchnorm1_gamma, %efficientnet0_features_mbconv15_batchnorm1_beta, %efficientnet0_features_mbconv15_batchnorm1_running_mean, %efficientnet0_features_mbconv15_batchnorm1_running_var, epsilon=0.001f);
  %302 = %301.0;
  %303 = multiply(%302, 1f);
  %304 = %301.0;
  %305 = sigmoid(%303);
  %306 = multiply(%304, %305);
  %307 = nn.conv2d(%306, %efficientnet0_features_mbconv15_conv2_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]);
  %308 = nn.batch_norm(%307, %efficientnet0_features_mbconv15_batchnorm2_gamma, %efficientnet0_features_mbconv15_batchnorm2_beta, %efficientnet0_features_mbconv15_batchnorm2_running_mean, %efficientnet0_features_mbconv15_batchnorm2_running_var, epsilon=0.001f);
  %309 = %308.0;
  %310 = nn.conv2d(%309, %efficientnet0_features_conv1_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]);
  %311 = nn.batch_norm(%310, %efficientnet0_features_batchnorm1_gamma, %efficientnet0_features_batchnorm1_beta, %efficientnet0_features_batchnorm1_running_mean, %efficientnet0_features_batchnorm1_running_var, epsilon=0.001f);
  %312 = %311.0;
  %313 = multiply(%312, 1f);
  %314 = %311.0;
  %315 = sigmoid(%313);
  %316 = multiply(%314, %315);
  %317 = nn.global_avg_pool2d(%316);
  %318 = nn.dropout(%317, rate=0.2f);
  %319 = %318.0;
  %320 = nn.conv2d(%319, %efficientnet0_output_pred_weight, padding=[0, 0, 0, 0], channels=1000, kernel_size=[1, 1]);
  nn.batch_flatten(%320)
}
