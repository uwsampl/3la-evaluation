#[version = "0.0.5"]
type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type Option[A] {
  Some(A),
  None,
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

def @main(%input_0: Tensor[(1, 3, 32, 32), float32], %conv1_weight: Tensor[(32, 3, 3, 3), float32], %bn1_weight: Tensor[(32), float32], %bn1_bias: Tensor[(32), float32], %bn1_running_mean: Tensor[(32), float32], %bn1_running_var: Tensor[(32), float32], %layers_0_conv1_weight: Tensor[(32, 32, 1, 1), float32], %layers_0_bn1_weight: Tensor[(32), float32], %layers_0_bn1_bias: Tensor[(32), float32], %layers_0_bn1_running_mean: Tensor[(32), float32], %layers_0_bn1_running_var: Tensor[(32), float32], %layers_0_conv2_weight: Tensor[(32, 1, 3, 3), float32], %layers_0_bn2_weight: Tensor[(32), float32], %layers_0_bn2_bias: Tensor[(32), float32], %layers_0_bn2_running_mean: Tensor[(32), float32], %layers_0_bn2_running_var: Tensor[(32), float32], %layers_0_conv3_weight: Tensor[(16, 32, 1, 1), float32], %layers_0_bn3_weight: Tensor[(16), float32], %layers_0_bn3_bias: Tensor[(16), float32], %layers_0_bn3_running_mean: Tensor[(16), float32], %layers_0_bn3_running_var: Tensor[(16), float32], %layers_0_shortcut_0_weight: Tensor[(16, 32, 1, 1), float32], %layers_0_shortcut_1_weight: Tensor[(16), float32], %layers_0_shortcut_1_bias: Tensor[(16), float32], %layers_0_shortcut_1_running_mean: Tensor[(16), float32], %layers_0_shortcut_1_running_var: Tensor[(16), float32], %layers_1_conv1_weight: Tensor[(96, 16, 1, 1), float32], %layers_1_bn1_weight: Tensor[(96), float32], %layers_1_bn1_bias: Tensor[(96), float32], %layers_1_bn1_running_mean: Tensor[(96), float32], %layers_1_bn1_running_var: Tensor[(96), float32], %layers_1_conv2_weight: Tensor[(96, 1, 3, 3), float32], %layers_1_bn2_weight: Tensor[(96), float32], %layers_1_bn2_bias: Tensor[(96), float32], %layers_1_bn2_running_mean: Tensor[(96), float32], %layers_1_bn2_running_var: Tensor[(96), float32], %layers_1_conv3_weight: Tensor[(24, 96, 1, 1), float32], %layers_1_bn3_weight: Tensor[(24), float32], %layers_1_bn3_bias: Tensor[(24), float32], %layers_1_bn3_running_mean: Tensor[(24), float32], %layers_1_bn3_running_var: Tensor[(24), float32], %layers_1_shortcut_0_weight: Tensor[(24, 16, 1, 1), float32], %layers_1_shortcut_1_weight: Tensor[(24), float32], %layers_1_shortcut_1_bias: Tensor[(24), float32], %layers_1_shortcut_1_running_mean: Tensor[(24), float32], %layers_1_shortcut_1_running_var: Tensor[(24), float32], %layers_2_conv1_weight: Tensor[(144, 24, 1, 1), float32], %layers_2_bn1_weight: Tensor[(144), float32], %layers_2_bn1_bias: Tensor[(144), float32], %layers_2_bn1_running_mean: Tensor[(144), float32], %layers_2_bn1_running_var: Tensor[(144), float32], %layers_2_conv2_weight: Tensor[(144, 1, 3, 3), float32], %layers_2_bn2_weight: Tensor[(144), float32], %layers_2_bn2_bias: Tensor[(144), float32], %layers_2_bn2_running_mean: Tensor[(144), float32], %layers_2_bn2_running_var: Tensor[(144), float32], %layers_2_conv3_weight: Tensor[(24, 144, 1, 1), float32], %layers_2_bn3_weight: Tensor[(24), float32], %layers_2_bn3_bias: Tensor[(24), float32], %layers_2_bn3_running_mean: Tensor[(24), float32], %layers_2_bn3_running_var: Tensor[(24), float32], %layers_3_conv1_weight: Tensor[(144, 24, 1, 1), float32], %layers_3_bn1_weight: Tensor[(144), float32], %layers_3_bn1_bias: Tensor[(144), float32], %layers_3_bn1_running_mean: Tensor[(144), float32], %layers_3_bn1_running_var: Tensor[(144), float32], %layers_3_conv2_weight: Tensor[(144, 1, 3, 3), float32], %layers_3_bn2_weight: Tensor[(144), float32], %layers_3_bn2_bias: Tensor[(144), float32], %layers_3_bn2_running_mean: Tensor[(144), float32], %layers_3_bn2_running_var: Tensor[(144), float32], %layers_3_conv3_weight: Tensor[(32, 144, 1, 1), float32], %layers_3_bn3_weight: Tensor[(32), float32], %layers_3_bn3_bias: Tensor[(32), float32], %layers_3_bn3_running_mean: Tensor[(32), float32], %layers_3_bn3_running_var: Tensor[(32), float32], %layers_4_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_4_bn1_weight: Tensor[(192), float32], %layers_4_bn1_bias: Tensor[(192), float32], %layers_4_bn1_running_mean: Tensor[(192), float32], %layers_4_bn1_running_var: Tensor[(192), float32], %layers_4_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_4_bn2_weight: Tensor[(192), float32], %layers_4_bn2_bias: Tensor[(192), float32], %layers_4_bn2_running_mean: Tensor[(192), float32], %layers_4_bn2_running_var: Tensor[(192), float32], %layers_4_conv3_weight: Tensor[(32, 192, 1, 1), float32], %layers_4_bn3_weight: Tensor[(32), float32], %layers_4_bn3_bias: Tensor[(32), float32], %layers_4_bn3_running_mean: Tensor[(32), float32], %layers_4_bn3_running_var: Tensor[(32), float32], %layers_5_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_5_bn1_weight: Tensor[(192), float32], %layers_5_bn1_bias: Tensor[(192), float32], %layers_5_bn1_running_mean: Tensor[(192), float32], %layers_5_bn1_running_var: Tensor[(192), float32], %layers_5_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_5_bn2_weight: Tensor[(192), float32], %layers_5_bn2_bias: Tensor[(192), float32], %layers_5_bn2_running_mean: Tensor[(192), float32], %layers_5_bn2_running_var: Tensor[(192), float32], %layers_5_conv3_weight: Tensor[(32, 192, 1, 1), float32], %layers_5_bn3_weight: Tensor[(32), float32], %layers_5_bn3_bias: Tensor[(32), float32], %layers_5_bn3_running_mean: Tensor[(32), float32], %layers_5_bn3_running_var: Tensor[(32), float32], %layers_6_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_6_bn1_weight: Tensor[(192), float32], %layers_6_bn1_bias: Tensor[(192), float32], %layers_6_bn1_running_mean: Tensor[(192), float32], %layers_6_bn1_running_var: Tensor[(192), float32], %layers_6_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_6_bn2_weight: Tensor[(192), float32], %layers_6_bn2_bias: Tensor[(192), float32], %layers_6_bn2_running_mean: Tensor[(192), float32], %layers_6_bn2_running_var: Tensor[(192), float32], %layers_6_conv3_weight: Tensor[(64, 192, 1, 1), float32], %layers_6_bn3_weight: Tensor[(64), float32], %layers_6_bn3_bias: Tensor[(64), float32], %layers_6_bn3_running_mean: Tensor[(64), float32], %layers_6_bn3_running_var: Tensor[(64), float32], %layers_7_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_7_bn1_weight: Tensor[(384), float32], %layers_7_bn1_bias: Tensor[(384), float32], %layers_7_bn1_running_mean: Tensor[(384), float32], %layers_7_bn1_running_var: Tensor[(384), float32], %layers_7_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_7_bn2_weight: Tensor[(384), float32], %layers_7_bn2_bias: Tensor[(384), float32], %layers_7_bn2_running_mean: Tensor[(384), float32], %layers_7_bn2_running_var: Tensor[(384), float32], %layers_7_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_7_bn3_weight: Tensor[(64), float32], %layers_7_bn3_bias: Tensor[(64), float32], %layers_7_bn3_running_mean: Tensor[(64), float32], %layers_7_bn3_running_var: Tensor[(64), float32], %layers_8_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_8_bn1_weight: Tensor[(384), float32], %layers_8_bn1_bias: Tensor[(384), float32], %layers_8_bn1_running_mean: Tensor[(384), float32], %layers_8_bn1_running_var: Tensor[(384), float32], %layers_8_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_8_bn2_weight: Tensor[(384), float32], %layers_8_bn2_bias: Tensor[(384), float32], %layers_8_bn2_running_mean: Tensor[(384), float32], %layers_8_bn2_running_var: Tensor[(384), float32], %layers_8_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_8_bn3_weight: Tensor[(64), float32], %layers_8_bn3_bias: Tensor[(64), float32], %layers_8_bn3_running_mean: Tensor[(64), float32], %layers_8_bn3_running_var: Tensor[(64), float32], %layers_9_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_9_bn1_weight: Tensor[(384), float32], %layers_9_bn1_bias: Tensor[(384), float32], %layers_9_bn1_running_mean: Tensor[(384), float32], %layers_9_bn1_running_var: Tensor[(384), float32], %layers_9_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_9_bn2_weight: Tensor[(384), float32], %layers_9_bn2_bias: Tensor[(384), float32], %layers_9_bn2_running_mean: Tensor[(384), float32], %layers_9_bn2_running_var: Tensor[(384), float32], %layers_9_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_9_bn3_weight: Tensor[(64), float32], %layers_9_bn3_bias: Tensor[(64), float32], %layers_9_bn3_running_mean: Tensor[(64), float32], %layers_9_bn3_running_var: Tensor[(64), float32], %layers_10_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_10_bn1_weight: Tensor[(384), float32], %layers_10_bn1_bias: Tensor[(384), float32], %layers_10_bn1_running_mean: Tensor[(384), float32], %layers_10_bn1_running_var: Tensor[(384), float32], %layers_10_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_10_bn2_weight: Tensor[(384), float32], %layers_10_bn2_bias: Tensor[(384), float32], %layers_10_bn2_running_mean: Tensor[(384), float32], %layers_10_bn2_running_var: Tensor[(384), float32], %layers_10_conv3_weight: Tensor[(96, 384, 1, 1), float32], %layers_10_bn3_weight: Tensor[(96), float32], %layers_10_bn3_bias: Tensor[(96), float32], %layers_10_bn3_running_mean: Tensor[(96), float32], %layers_10_bn3_running_var: Tensor[(96), float32], %layers_10_shortcut_0_weight: Tensor[(96, 64, 1, 1), float32], %layers_10_shortcut_1_weight: Tensor[(96), float32], %layers_10_shortcut_1_bias: Tensor[(96), float32], %layers_10_shortcut_1_running_mean: Tensor[(96), float32], %layers_10_shortcut_1_running_var: Tensor[(96), float32], %layers_11_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_11_bn1_weight: Tensor[(576), float32], %layers_11_bn1_bias: Tensor[(576), float32], %layers_11_bn1_running_mean: Tensor[(576), float32], %layers_11_bn1_running_var: Tensor[(576), float32], %layers_11_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_11_bn2_weight: Tensor[(576), float32], %layers_11_bn2_bias: Tensor[(576), float32], %layers_11_bn2_running_mean: Tensor[(576), float32], %layers_11_bn2_running_var: Tensor[(576), float32], %layers_11_conv3_weight: Tensor[(96, 576, 1, 1), float32], %layers_11_bn3_weight: Tensor[(96), float32], %layers_11_bn3_bias: Tensor[(96), float32], %layers_11_bn3_running_mean: Tensor[(96), float32], %layers_11_bn3_running_var: Tensor[(96), float32], %layers_12_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_12_bn1_weight: Tensor[(576), float32], %layers_12_bn1_bias: Tensor[(576), float32], %layers_12_bn1_running_mean: Tensor[(576), float32], %layers_12_bn1_running_var: Tensor[(576), float32], %layers_12_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_12_bn2_weight: Tensor[(576), float32], %layers_12_bn2_bias: Tensor[(576), float32], %layers_12_bn2_running_mean: Tensor[(576), float32], %layers_12_bn2_running_var: Tensor[(576), float32], %layers_12_conv3_weight: Tensor[(96, 576, 1, 1), float32], %layers_12_bn3_weight: Tensor[(96), float32], %layers_12_bn3_bias: Tensor[(96), float32], %layers_12_bn3_running_mean: Tensor[(96), float32], %layers_12_bn3_running_var: Tensor[(96), float32], %layers_13_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_13_bn1_weight: Tensor[(576), float32], %layers_13_bn1_bias: Tensor[(576), float32], %layers_13_bn1_running_mean: Tensor[(576), float32], %layers_13_bn1_running_var: Tensor[(576), float32], %layers_13_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_13_bn2_weight: Tensor[(576), float32], %layers_13_bn2_bias: Tensor[(576), float32], %layers_13_bn2_running_mean: Tensor[(576), float32], %layers_13_bn2_running_var: Tensor[(576), float32], %layers_13_conv3_weight: Tensor[(160, 576, 1, 1), float32], %layers_13_bn3_weight: Tensor[(160), float32], %layers_13_bn3_bias: Tensor[(160), float32], %layers_13_bn3_running_mean: Tensor[(160), float32], %layers_13_bn3_running_var: Tensor[(160), float32], %layers_14_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_14_bn1_weight: Tensor[(960), float32], %layers_14_bn1_bias: Tensor[(960), float32], %layers_14_bn1_running_mean: Tensor[(960), float32], %layers_14_bn1_running_var: Tensor[(960), float32], %layers_14_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_14_bn2_weight: Tensor[(960), float32], %layers_14_bn2_bias: Tensor[(960), float32], %layers_14_bn2_running_mean: Tensor[(960), float32], %layers_14_bn2_running_var: Tensor[(960), float32], %layers_14_conv3_weight: Tensor[(160, 960, 1, 1), float32], %layers_14_bn3_weight: Tensor[(160), float32], %layers_14_bn3_bias: Tensor[(160), float32], %layers_14_bn3_running_mean: Tensor[(160), float32], %layers_14_bn3_running_var: Tensor[(160), float32], %layers_15_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_15_bn1_weight: Tensor[(960), float32], %layers_15_bn1_bias: Tensor[(960), float32], %layers_15_bn1_running_mean: Tensor[(960), float32], %layers_15_bn1_running_var: Tensor[(960), float32], %layers_15_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_15_bn2_weight: Tensor[(960), float32], %layers_15_bn2_bias: Tensor[(960), float32], %layers_15_bn2_running_mean: Tensor[(960), float32], %layers_15_bn2_running_var: Tensor[(960), float32], %layers_15_conv3_weight: Tensor[(160, 960, 1, 1), float32], %layers_15_bn3_weight: Tensor[(160), float32], %layers_15_bn3_bias: Tensor[(160), float32], %layers_15_bn3_running_mean: Tensor[(160), float32], %layers_15_bn3_running_var: Tensor[(160), float32], %layers_16_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_16_bn1_weight: Tensor[(960), float32], %layers_16_bn1_bias: Tensor[(960), float32], %layers_16_bn1_running_mean: Tensor[(960), float32], %layers_16_bn1_running_var: Tensor[(960), float32], %layers_16_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_16_bn2_weight: Tensor[(960), float32], %layers_16_bn2_bias: Tensor[(960), float32], %layers_16_bn2_running_mean: Tensor[(960), float32], %layers_16_bn2_running_var: Tensor[(960), float32], %layers_16_conv3_weight: Tensor[(320, 960, 1, 1), float32], %layers_16_bn3_weight: Tensor[(320), float32], %layers_16_bn3_bias: Tensor[(320), float32], %layers_16_bn3_running_mean: Tensor[(320), float32], %layers_16_bn3_running_var: Tensor[(320), float32], %layers_16_shortcut_0_weight: Tensor[(320, 160, 1, 1), float32], %layers_16_shortcut_1_weight: Tensor[(320), float32], %layers_16_shortcut_1_bias: Tensor[(320), float32], %layers_16_shortcut_1_running_mean: Tensor[(320), float32], %layers_16_shortcut_1_running_var: Tensor[(320), float32], %conv2_weight: Tensor[(1280, 320, 1, 1), float32], %bn2_weight: Tensor[(1280), float32], %bn2_bias: Tensor[(1280), float32], %bn2_running_mean: Tensor[(1280), float32], %bn2_running_var: Tensor[(1280), float32], %linear_weight: Tensor[(10, 1280), float32], %linear_bias: Tensor[(10), float32]) -> Tensor[(1, 10), float32] {
  %0 = nn.conv2d(%input_0, %conv1_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %1 = nn.batch_norm(%0, %bn1_weight, %bn1_bias, %bn1_running_mean, %bn1_running_var) /* ty=(Tensor[(1, 32, 32, 32), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %2 = %1.0;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %4 = nn.conv2d(%3, %layers_0_conv1_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %5 = nn.batch_norm(%4, %layers_0_bn1_weight, %layers_0_bn1_bias, %layers_0_bn1_running_mean, %layers_0_bn1_running_var) /* ty=(Tensor[(1, 32, 32, 32), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %6 = %5.0;
  %7 = nn.relu(%6) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %8 = reshape(%layers_0_conv2_weight, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %9 = nn.conv2d(%7, %8, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %10 = nn.batch_norm(%9, %layers_0_bn2_weight, %layers_0_bn2_bias, %layers_0_bn2_running_mean, %layers_0_bn2_running_var) /* ty=(Tensor[(1, 32, 32, 32), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %11 = %10.0;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %13 = nn.conv2d(%12, %layers_0_conv3_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %14 = nn.batch_norm(%13, %layers_0_bn3_weight, %layers_0_bn3_bias, %layers_0_bn3_running_mean, %layers_0_bn3_running_var) /* ty=(Tensor[(1, 16, 32, 32), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %15 = nn.conv2d(%3, %layers_0_shortcut_0_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %16 = nn.batch_norm(%15, %layers_0_shortcut_1_weight, %layers_0_shortcut_1_bias, %layers_0_shortcut_1_running_mean, %layers_0_shortcut_1_running_var) /* ty=(Tensor[(1, 16, 32, 32), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %17 = %14.0;
  %18 = %16.0;
  %19 = add(%17, %18) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %20 = nn.conv2d(%19, %layers_1_conv1_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %21 = nn.batch_norm(%20, %layers_1_bn1_weight, %layers_1_bn1_bias, %layers_1_bn1_running_mean, %layers_1_bn1_running_var) /* ty=(Tensor[(1, 96, 32, 32), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %22 = %21.0;
  %23 = nn.relu(%22) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %24 = reshape(%layers_1_conv2_weight, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %25 = nn.conv2d(%23, %24, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %26 = nn.batch_norm(%25, %layers_1_bn2_weight, %layers_1_bn2_bias, %layers_1_bn2_running_mean, %layers_1_bn2_running_var) /* ty=(Tensor[(1, 96, 32, 32), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %27 = %26.0;
  %28 = nn.relu(%27) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %29 = nn.conv2d(%28, %layers_1_conv3_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %30 = nn.batch_norm(%29, %layers_1_bn3_weight, %layers_1_bn3_bias, %layers_1_bn3_running_mean, %layers_1_bn3_running_var) /* ty=(Tensor[(1, 24, 32, 32), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %31 = nn.conv2d(%19, %layers_1_shortcut_0_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %32 = nn.batch_norm(%31, %layers_1_shortcut_1_weight, %layers_1_shortcut_1_bias, %layers_1_shortcut_1_running_mean, %layers_1_shortcut_1_running_var) /* ty=(Tensor[(1, 24, 32, 32), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %33 = %30.0;
  %34 = %32.0;
  %35 = add(%33, %34) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %36 = nn.conv2d(%35, %layers_2_conv1_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %37 = nn.batch_norm(%36, %layers_2_bn1_weight, %layers_2_bn1_bias, %layers_2_bn1_running_mean, %layers_2_bn1_running_var) /* ty=(Tensor[(1, 144, 32, 32), float32], Tensor[(144), float32], Tensor[(144), float32]) */;
  %38 = %37.0;
  %39 = nn.relu(%38) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %40 = reshape(%layers_2_conv2_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %41 = nn.conv2d(%39, %40, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %42 = nn.batch_norm(%41, %layers_2_bn2_weight, %layers_2_bn2_bias, %layers_2_bn2_running_mean, %layers_2_bn2_running_var) /* ty=(Tensor[(1, 144, 32, 32), float32], Tensor[(144), float32], Tensor[(144), float32]) */;
  %43 = %42.0;
  %44 = nn.relu(%43) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %45 = nn.conv2d(%44, %layers_2_conv3_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %46 = nn.batch_norm(%45, %layers_2_bn3_weight, %layers_2_bn3_bias, %layers_2_bn3_running_mean, %layers_2_bn3_running_var) /* ty=(Tensor[(1, 24, 32, 32), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %47 = %46.0;
  %48 = add(%47, %35) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %49 = nn.conv2d(%48, %layers_3_conv1_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %50 = nn.batch_norm(%49, %layers_3_bn1_weight, %layers_3_bn1_bias, %layers_3_bn1_running_mean, %layers_3_bn1_running_var) /* ty=(Tensor[(1, 144, 32, 32), float32], Tensor[(144), float32], Tensor[(144), float32]) */;
  %51 = %50.0;
  %52 = nn.relu(%51) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %53 = reshape(%layers_3_conv2_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %54 = nn.conv2d(%52, %53, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %55 = nn.batch_norm(%54, %layers_3_bn2_weight, %layers_3_bn2_bias, %layers_3_bn2_running_mean, %layers_3_bn2_running_var) /* ty=(Tensor[(1, 144, 16, 16), float32], Tensor[(144), float32], Tensor[(144), float32]) */;
  %56 = %55.0;
  %57 = nn.relu(%56) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %58 = nn.conv2d(%57, %layers_3_conv3_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %59 = nn.batch_norm(%58, %layers_3_bn3_weight, %layers_3_bn3_bias, %layers_3_bn3_running_mean, %layers_3_bn3_running_var) /* ty=(Tensor[(1, 32, 16, 16), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %60 = %59.0;
  %61 = nn.conv2d(%60, %layers_4_conv1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %62 = nn.batch_norm(%61, %layers_4_bn1_weight, %layers_4_bn1_bias, %layers_4_bn1_running_mean, %layers_4_bn1_running_var) /* ty=(Tensor[(1, 192, 16, 16), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %63 = %62.0;
  %64 = nn.relu(%63) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %65 = reshape(%layers_4_conv2_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %66 = nn.conv2d(%64, %65, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %67 = nn.batch_norm(%66, %layers_4_bn2_weight, %layers_4_bn2_bias, %layers_4_bn2_running_mean, %layers_4_bn2_running_var) /* ty=(Tensor[(1, 192, 16, 16), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %68 = %67.0;
  %69 = nn.relu(%68) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %70 = nn.conv2d(%69, %layers_4_conv3_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %71 = nn.batch_norm(%70, %layers_4_bn3_weight, %layers_4_bn3_bias, %layers_4_bn3_running_mean, %layers_4_bn3_running_var) /* ty=(Tensor[(1, 32, 16, 16), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %72 = %71.0;
  %73 = add(%72, %60) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %74 = nn.conv2d(%73, %layers_5_conv1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %75 = nn.batch_norm(%74, %layers_5_bn1_weight, %layers_5_bn1_bias, %layers_5_bn1_running_mean, %layers_5_bn1_running_var) /* ty=(Tensor[(1, 192, 16, 16), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %76 = %75.0;
  %77 = nn.relu(%76) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %78 = reshape(%layers_5_conv2_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %79 = nn.conv2d(%77, %78, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %80 = nn.batch_norm(%79, %layers_5_bn2_weight, %layers_5_bn2_bias, %layers_5_bn2_running_mean, %layers_5_bn2_running_var) /* ty=(Tensor[(1, 192, 16, 16), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %81 = %80.0;
  %82 = nn.relu(%81) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %83 = nn.conv2d(%82, %layers_5_conv3_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %84 = nn.batch_norm(%83, %layers_5_bn3_weight, %layers_5_bn3_bias, %layers_5_bn3_running_mean, %layers_5_bn3_running_var) /* ty=(Tensor[(1, 32, 16, 16), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %85 = %84.0;
  %86 = add(%85, %73) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %87 = nn.conv2d(%86, %layers_6_conv1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %88 = nn.batch_norm(%87, %layers_6_bn1_weight, %layers_6_bn1_bias, %layers_6_bn1_running_mean, %layers_6_bn1_running_var) /* ty=(Tensor[(1, 192, 16, 16), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %89 = %88.0;
  %90 = nn.relu(%89) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %91 = reshape(%layers_6_conv2_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %92 = nn.conv2d(%90, %91, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %93 = nn.batch_norm(%92, %layers_6_bn2_weight, %layers_6_bn2_bias, %layers_6_bn2_running_mean, %layers_6_bn2_running_var) /* ty=(Tensor[(1, 192, 8, 8), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %94 = %93.0;
  %95 = nn.relu(%94) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %96 = nn.conv2d(%95, %layers_6_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %97 = nn.batch_norm(%96, %layers_6_bn3_weight, %layers_6_bn3_bias, %layers_6_bn3_running_mean, %layers_6_bn3_running_var) /* ty=(Tensor[(1, 64, 8, 8), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %98 = %97.0;
  %99 = nn.conv2d(%98, %layers_7_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %100 = nn.batch_norm(%99, %layers_7_bn1_weight, %layers_7_bn1_bias, %layers_7_bn1_running_mean, %layers_7_bn1_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %101 = %100.0;
  %102 = nn.relu(%101) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %103 = reshape(%layers_7_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %104 = nn.conv2d(%102, %103, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %105 = nn.batch_norm(%104, %layers_7_bn2_weight, %layers_7_bn2_bias, %layers_7_bn2_running_mean, %layers_7_bn2_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %106 = %105.0;
  %107 = nn.relu(%106) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %108 = nn.conv2d(%107, %layers_7_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %109 = nn.batch_norm(%108, %layers_7_bn3_weight, %layers_7_bn3_bias, %layers_7_bn3_running_mean, %layers_7_bn3_running_var) /* ty=(Tensor[(1, 64, 8, 8), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %110 = %109.0;
  %111 = add(%110, %98) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %112 = nn.conv2d(%111, %layers_8_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %113 = nn.batch_norm(%112, %layers_8_bn1_weight, %layers_8_bn1_bias, %layers_8_bn1_running_mean, %layers_8_bn1_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %114 = %113.0;
  %115 = nn.relu(%114) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %116 = reshape(%layers_8_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %117 = nn.conv2d(%115, %116, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %118 = nn.batch_norm(%117, %layers_8_bn2_weight, %layers_8_bn2_bias, %layers_8_bn2_running_mean, %layers_8_bn2_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %119 = %118.0;
  %120 = nn.relu(%119) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %121 = nn.conv2d(%120, %layers_8_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %122 = nn.batch_norm(%121, %layers_8_bn3_weight, %layers_8_bn3_bias, %layers_8_bn3_running_mean, %layers_8_bn3_running_var) /* ty=(Tensor[(1, 64, 8, 8), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %123 = %122.0;
  %124 = add(%123, %111) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %125 = nn.conv2d(%124, %layers_9_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %126 = nn.batch_norm(%125, %layers_9_bn1_weight, %layers_9_bn1_bias, %layers_9_bn1_running_mean, %layers_9_bn1_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %127 = %126.0;
  %128 = nn.relu(%127) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %129 = reshape(%layers_9_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %130 = nn.conv2d(%128, %129, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %131 = nn.batch_norm(%130, %layers_9_bn2_weight, %layers_9_bn2_bias, %layers_9_bn2_running_mean, %layers_9_bn2_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %132 = %131.0;
  %133 = nn.relu(%132) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %134 = nn.conv2d(%133, %layers_9_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %135 = nn.batch_norm(%134, %layers_9_bn3_weight, %layers_9_bn3_bias, %layers_9_bn3_running_mean, %layers_9_bn3_running_var) /* ty=(Tensor[(1, 64, 8, 8), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %136 = %135.0;
  %137 = add(%136, %124) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %138 = nn.conv2d(%137, %layers_10_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %139 = nn.batch_norm(%138, %layers_10_bn1_weight, %layers_10_bn1_bias, %layers_10_bn1_running_mean, %layers_10_bn1_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %140 = %139.0;
  %141 = nn.relu(%140) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %142 = reshape(%layers_10_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %143 = nn.conv2d(%141, %142, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %144 = nn.batch_norm(%143, %layers_10_bn2_weight, %layers_10_bn2_bias, %layers_10_bn2_running_mean, %layers_10_bn2_running_var) /* ty=(Tensor[(1, 384, 8, 8), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %145 = %144.0;
  %146 = nn.relu(%145) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %147 = nn.conv2d(%146, %layers_10_conv3_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %148 = nn.batch_norm(%147, %layers_10_bn3_weight, %layers_10_bn3_bias, %layers_10_bn3_running_mean, %layers_10_bn3_running_var) /* ty=(Tensor[(1, 96, 8, 8), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %149 = nn.conv2d(%137, %layers_10_shortcut_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %150 = nn.batch_norm(%149, %layers_10_shortcut_1_weight, %layers_10_shortcut_1_bias, %layers_10_shortcut_1_running_mean, %layers_10_shortcut_1_running_var) /* ty=(Tensor[(1, 96, 8, 8), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %151 = %148.0;
  %152 = %150.0;
  %153 = add(%151, %152) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %154 = nn.conv2d(%153, %layers_11_conv1_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %155 = nn.batch_norm(%154, %layers_11_bn1_weight, %layers_11_bn1_bias, %layers_11_bn1_running_mean, %layers_11_bn1_running_var) /* ty=(Tensor[(1, 576, 8, 8), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %156 = %155.0;
  %157 = nn.relu(%156) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %158 = reshape(%layers_11_conv2_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %159 = nn.conv2d(%157, %158, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %160 = nn.batch_norm(%159, %layers_11_bn2_weight, %layers_11_bn2_bias, %layers_11_bn2_running_mean, %layers_11_bn2_running_var) /* ty=(Tensor[(1, 576, 8, 8), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %161 = %160.0;
  %162 = nn.relu(%161) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %163 = nn.conv2d(%162, %layers_11_conv3_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %164 = nn.batch_norm(%163, %layers_11_bn3_weight, %layers_11_bn3_bias, %layers_11_bn3_running_mean, %layers_11_bn3_running_var) /* ty=(Tensor[(1, 96, 8, 8), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %165 = %164.0;
  %166 = add(%165, %153) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %167 = nn.conv2d(%166, %layers_12_conv1_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %168 = nn.batch_norm(%167, %layers_12_bn1_weight, %layers_12_bn1_bias, %layers_12_bn1_running_mean, %layers_12_bn1_running_var) /* ty=(Tensor[(1, 576, 8, 8), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %169 = %168.0;
  %170 = nn.relu(%169) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %171 = reshape(%layers_12_conv2_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %172 = nn.conv2d(%170, %171, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %173 = nn.batch_norm(%172, %layers_12_bn2_weight, %layers_12_bn2_bias, %layers_12_bn2_running_mean, %layers_12_bn2_running_var) /* ty=(Tensor[(1, 576, 8, 8), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %174 = %173.0;
  %175 = nn.relu(%174) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %176 = nn.conv2d(%175, %layers_12_conv3_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %177 = nn.batch_norm(%176, %layers_12_bn3_weight, %layers_12_bn3_bias, %layers_12_bn3_running_mean, %layers_12_bn3_running_var) /* ty=(Tensor[(1, 96, 8, 8), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %178 = %177.0;
  %179 = add(%178, %166) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %180 = nn.conv2d(%179, %layers_13_conv1_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %181 = nn.batch_norm(%180, %layers_13_bn1_weight, %layers_13_bn1_bias, %layers_13_bn1_running_mean, %layers_13_bn1_running_var) /* ty=(Tensor[(1, 576, 8, 8), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %182 = %181.0;
  %183 = nn.relu(%182) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %184 = reshape(%layers_13_conv2_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %185 = nn.conv2d(%183, %184, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %186 = nn.batch_norm(%185, %layers_13_bn2_weight, %layers_13_bn2_bias, %layers_13_bn2_running_mean, %layers_13_bn2_running_var) /* ty=(Tensor[(1, 576, 4, 4), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %187 = %186.0;
  %188 = nn.relu(%187) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %189 = nn.conv2d(%188, %layers_13_conv3_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %190 = nn.batch_norm(%189, %layers_13_bn3_weight, %layers_13_bn3_bias, %layers_13_bn3_running_mean, %layers_13_bn3_running_var) /* ty=(Tensor[(1, 160, 4, 4), float32], Tensor[(160), float32], Tensor[(160), float32]) */;
  %191 = %190.0;
  %192 = nn.conv2d(%191, %layers_14_conv1_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %193 = nn.batch_norm(%192, %layers_14_bn1_weight, %layers_14_bn1_bias, %layers_14_bn1_running_mean, %layers_14_bn1_running_var) /* ty=(Tensor[(1, 960, 4, 4), float32], Tensor[(960), float32], Tensor[(960), float32]) */;
  %194 = %193.0;
  %195 = nn.relu(%194) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %196 = reshape(%layers_14_conv2_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %197 = nn.conv2d(%195, %196, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %198 = nn.batch_norm(%197, %layers_14_bn2_weight, %layers_14_bn2_bias, %layers_14_bn2_running_mean, %layers_14_bn2_running_var) /* ty=(Tensor[(1, 960, 4, 4), float32], Tensor[(960), float32], Tensor[(960), float32]) */;
  %199 = %198.0;
  %200 = nn.relu(%199) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %201 = nn.conv2d(%200, %layers_14_conv3_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %202 = nn.batch_norm(%201, %layers_14_bn3_weight, %layers_14_bn3_bias, %layers_14_bn3_running_mean, %layers_14_bn3_running_var) /* ty=(Tensor[(1, 160, 4, 4), float32], Tensor[(160), float32], Tensor[(160), float32]) */;
  %203 = %202.0;
  %204 = add(%203, %191) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %205 = nn.conv2d(%204, %layers_15_conv1_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %206 = nn.batch_norm(%205, %layers_15_bn1_weight, %layers_15_bn1_bias, %layers_15_bn1_running_mean, %layers_15_bn1_running_var) /* ty=(Tensor[(1, 960, 4, 4), float32], Tensor[(960), float32], Tensor[(960), float32]) */;
  %207 = %206.0;
  %208 = nn.relu(%207) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %209 = reshape(%layers_15_conv2_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %210 = nn.conv2d(%208, %209, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %211 = nn.batch_norm(%210, %layers_15_bn2_weight, %layers_15_bn2_bias, %layers_15_bn2_running_mean, %layers_15_bn2_running_var) /* ty=(Tensor[(1, 960, 4, 4), float32], Tensor[(960), float32], Tensor[(960), float32]) */;
  %212 = %211.0;
  %213 = nn.relu(%212) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %214 = nn.conv2d(%213, %layers_15_conv3_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %215 = nn.batch_norm(%214, %layers_15_bn3_weight, %layers_15_bn3_bias, %layers_15_bn3_running_mean, %layers_15_bn3_running_var) /* ty=(Tensor[(1, 160, 4, 4), float32], Tensor[(160), float32], Tensor[(160), float32]) */;
  %216 = %215.0;
  %217 = add(%216, %204) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %218 = nn.conv2d(%217, %layers_16_conv1_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %219 = nn.batch_norm(%218, %layers_16_bn1_weight, %layers_16_bn1_bias, %layers_16_bn1_running_mean, %layers_16_bn1_running_var) /* ty=(Tensor[(1, 960, 4, 4), float32], Tensor[(960), float32], Tensor[(960), float32]) */;
  %220 = %219.0;
  %221 = nn.relu(%220) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %222 = reshape(%layers_16_conv2_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %223 = nn.conv2d(%221, %222, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %224 = nn.batch_norm(%223, %layers_16_bn2_weight, %layers_16_bn2_bias, %layers_16_bn2_running_mean, %layers_16_bn2_running_var) /* ty=(Tensor[(1, 960, 4, 4), float32], Tensor[(960), float32], Tensor[(960), float32]) */;
  %225 = %224.0;
  %226 = nn.relu(%225) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %227 = nn.conv2d(%226, %layers_16_conv3_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %228 = nn.batch_norm(%227, %layers_16_bn3_weight, %layers_16_bn3_bias, %layers_16_bn3_running_mean, %layers_16_bn3_running_var) /* ty=(Tensor[(1, 320, 4, 4), float32], Tensor[(320), float32], Tensor[(320), float32]) */;
  %229 = nn.conv2d(%217, %layers_16_shortcut_0_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %230 = nn.batch_norm(%229, %layers_16_shortcut_1_weight, %layers_16_shortcut_1_bias, %layers_16_shortcut_1_running_mean, %layers_16_shortcut_1_running_var) /* ty=(Tensor[(1, 320, 4, 4), float32], Tensor[(320), float32], Tensor[(320), float32]) */;
  %231 = %228.0;
  %232 = %230.0;
  %233 = add(%231, %232) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %234 = nn.conv2d(%233, %conv2_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %235 = nn.batch_norm(%234, %bn2_weight, %bn2_bias, %bn2_running_mean, %bn2_running_var) /* ty=(Tensor[(1, 1280, 4, 4), float32], Tensor[(1280), float32], Tensor[(1280), float32]) */;
  %236 = %235.0;
  %237 = nn.relu(%236) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %238 = nn.avg_pool2d(%237, pool_size=[4, 4], strides=[4, 4], padding=[0, 0, 0, 0], count_include_pad=True) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %239 = transpose(%linear_weight, axes=[1, 0]) /* ty=Tensor[(1280, 10), float32] */;
  %240 = reshape(%238, newshape=[1, -1]) /* ty=Tensor[(1, 1280), float32] */;
  %241 = transpose(%239, axes=[1, 0]) /* ty=Tensor[(10, 1280), float32] */;
  %242 = nn.dense(%240, %241, units=10) /* ty=Tensor[(1, 10), float32] */;
  add(%242, %linear_bias) /* ty=Tensor[(1, 10), float32] */
}
